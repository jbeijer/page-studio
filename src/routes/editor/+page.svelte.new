<script>
  import { onMount } from 'svelte';
  import { browser } from '$app/environment';
  import { currentDocument, currentPage } from '$lib/stores/document';
  
  // Core Components
  import Canvas from '$lib/components/Editor/Canvas.refactored.svelte';
  import Toolbar from '$lib/components/Editor/Toolbar.svelte';
  import MasterPageController from '$lib/components/Editor/MasterPageController.svelte';
  
  // Modular Editor Components
  import EditorHeader from '$lib/components/Editor/editor/EditorHeader.svelte';
  import PageNavigator from '$lib/components/Editor/editor/PageNavigator.svelte';
  import PropertiesPanel from '$lib/components/Editor/editor/PropertiesPanel.svelte';
  
  // Service Provider and Services
  import ServiceProvider from '$lib/services/ServiceProvider.svelte';
  import { documentService, canvasService, masterPageService } from '$lib/services';
  import { createLegacyDocumentManager, createLegacyAutoSaveManager } from '$lib/services/ServiceIntegration';
  
  // For SSR prevention
  export const ssr = false;
  
  // Component state
  let canvasComponent;
  let masterPageController;
  let selectedObject = null;
  let selectedObjectType = null;
  let isSaving = false;
  let saveError = null;
  let documentTitle = '';
  let canUndo = false;
  let canRedo = false;
  
  // Create application context (legacy compatibility)
  const context = {
    canvasComponent: undefined
  };
  
  // Create legacy-compatible managers for transition period
  let documentManager;
  let autoSaveManager;
  
  onMount(async () => {
    // Update context with available components
    context.canvasComponent = canvasComponent;
    
    // Initialize legacy managers
    documentManager = createLegacyDocumentManager(context);
    autoSaveManager = createLegacyAutoSaveManager(context, {
      autoSaveDelay: 30000,    // 30 seconds
      forceSaveInterval: 15000 // 15 seconds
    });
    
    // Initialize auto-save systems
    autoSaveManager.initialize();
    
    // Get document ID from URL (only on client-side)
    let docId = null;
    
    if (browser && typeof window !== 'undefined') {
      try {
        const urlParams = new URLSearchParams(window.location.search);
        docId = urlParams.get('id');
        console.log("Got document ID from URL:", docId);
      } catch (err) {
        console.error("Failed to get document ID from URL:", err);
      }
    }
    
    // Load existing document or create a new one
    if (docId) {
      // Reset canvas before loading to ensure no stale content
      if (canvasComponent && typeof canvasComponent.resetCanvas === 'function') {
        console.log("Resetting canvas before document load");
        canvasComponent.resetCanvas();
      }
      
      console.log("Loading document with ID:", docId);
      const loadedDocument = await documentService.loadDocumentById(docId);
      
      if (loadedDocument) {
        documentTitle = loadedDocument.title;
        console.log(`Successfully loaded document: ${documentTitle} (${loadedDocument.id})`);
      } else {
        console.log("Document not found, creating new document");
        // Force a complete reset before creating new document
        if (canvasComponent && typeof canvasComponent.resetCanvas === 'function') {
          canvasComponent.resetCanvas();
        }
        
        // Create a new document with a completely clean slate
        setTimeout(async () => {
          const newDoc = await documentService.createNewDocument({ title: "Untitled Document" });
          console.log(`Created new document with ID: ${newDoc.id}`);
        }, 50);
      }
    } else {
      console.log("No document ID provided, creating new document");
      
      // Perform a complete reset before creating a new document
      if (canvasComponent && typeof canvasComponent.resetCanvas === 'function') {
        console.log("Performing canvas reset before new document creation");
        canvasComponent.resetCanvas();
      }
      
      // Create a new document with a completely clean slate
      setTimeout(async () => {
        try {
          console.log("Now creating new document with completely clean state");
          const newDoc = await documentService.createNewDocument({ title: "Untitled Document" });
          console.log(`Created new document with ID: ${newDoc.id}`);
        } catch (err) {
          console.error("Error during new document creation:", err);
        }
      }, 200);
    }
    
    // Cleanup when component unmounts
    return () => {
      autoSaveManager.cleanup();
    };
  });
  
  // Event handlers
  function handleObjectSelected(event) {
    selectedObject = event.detail.object;
    selectedObjectType = event.detail.objectType;
  }
  
  function handleHistoryChange(event) {
    canUndo = event.detail.canUndo;
    canRedo = event.detail.canRedo;
  }
  
  async function handleSave() {
    try {
      isSaving = true;
      saveError = null;
      
      // Update document title
      if (documentTitle !== $currentDocument.title) {
        documentService.updateDocumentTitle(documentTitle);
      }
      
      // Save the document
      await documentService.forceSave();
      
    } catch (err) {
      console.error('Error in handleSave:', err);
      saveError = err.message || "An unknown error occurred";
    } finally {
      isSaving = false;
    }
  }
  
  function handleExport() {
    // This is a placeholder for the export functionality
    // It will be implemented with jsPDF in a future step
    alert('Export functionality will be implemented in a future step');
  }
  
  function handleAddPage(masterPageId = null) {
    documentService.addPage(masterPageId);
  }
  
  function toggleMasterPagePanel() {
    if (masterPageController) {
      masterPageController.togglePanel();
    }
  }
  
  function handleEditMasterPage(event) {
    const { masterPageId } = event.detail;
    // TODO: Implement master page editing
    if (masterPageController) {
      masterPageController.editMasterPage(masterPageId);
    }
  }
  
  function handleMasterPageApplied(event) {
    // Refresh the canvas to show the applied master page
    if (canvasComponent) {
      const pageId = $currentPage;
      documentService.switchToPage(pageId);
    }
  }
</script>

<!-- Wrap entire app in ServiceProvider for dependency injection -->
<ServiceProvider>
  <div class="h-screen flex flex-col">
    <!-- Header -->
    <EditorHeader
      bind:documentTitle
      {isSaving}
      {saveError}
      {handleSave}
      {handleExport}
      {toggleMasterPagePanel}
    />
    
    <!-- Main editor area -->
    <div class="flex-1 flex relative">
      <!-- Tools panel (left) -->
      <Toolbar bind:canvasComponent />
      
      <!-- Canvas (center) -->
      <div class="flex-1 overflow-hidden">
        <Canvas 
          bind:this={canvasComponent} 
          on:objectselected={handleObjectSelected}
          on:historyChange={handleHistoryChange}
          on:editMasterPage={handleEditMasterPage}
        />
        
        <!-- Master Page Controller -->
        <MasterPageController 
          bind:this={masterPageController}
          canvasComponent={canvasComponent}
          on:editMasterPage={handleEditMasterPage}
          on:masterPageApplied={handleMasterPageApplied}
        />
      </div>
      
      <!-- Properties panel (right) -->
      <PropertiesPanel
        {selectedObject}
        {selectedObjectType}
        {canvasComponent}
        {canUndo}
        {canRedo}
      />
    </div>
    
    <!-- Page navigator (bottom) -->
    <PageNavigator {handleAddPage} />
  </div>
</ServiceProvider>